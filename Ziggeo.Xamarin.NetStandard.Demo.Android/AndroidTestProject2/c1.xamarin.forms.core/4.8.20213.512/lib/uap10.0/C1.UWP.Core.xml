<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.UWP.Core</name>
    </assembly>
    <members>
        <member name="T:C1.UWP.Core.C1Border">
            <summary>
            Basic control used to draw a border around another view.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1Border"/> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Border.CornerRadius">
            <summary>
            Gets or sets the corner radius of the cell.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Border.Content">
            <summary>
            Gets the content view of the cell.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Border.BorderAlignment">
            <summary>
            Gets or sets the way to draw the borders.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Border.ComputedMargin">
            <summary>
            Gets the margin of the Root element in the control template according to <see cref="P:Margin"/> and <see cref="P:BorderAlignment"/>.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1Border.PropertyChanged">
            <summary>
            Called when a property changed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Border.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:C1.UWP.Core.BorderAlignment">
            <summary>
            Determines the way to draw the borders of <see cref="T:C1.UWP.Core.C1Border"/>.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.BorderAlignment.Inner">
            <summary>
            Draw the borders inside the bound's edges
            </summary>
        </member>
        <member name="F:C1.UWP.Core.BorderAlignment.Center">
            <summary>
            Draw the borders centering the bound's edges
            </summary>
        </member>
        <member name="F:C1.UWP.Core.BorderAlignment.Outer">
            <summary>
            Draw the border outer the bound's edges
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1Icon">
            <summary>
            Represents a visual icon that can be tinted and resized.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1Icon.DEFAULT_WIDTH">
            <summary>
            The default width of an icon.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1Icon.DEFAULT_HEIGHT">
            <summary>
            The default height of an icon.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Icon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1Icon"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Icon.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Icon.FinalizeUI">
            <summary>
            Finalizes the user interface.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1CompositeIcon">
            <summary>
            Represent an icon created from a list of icons superposed one on top of the other.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1CompositeIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1CompositeIcon" /> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1CompositeIcon.Icons">
            <summary>
            Gets the list of icons that will be rendered.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1CompositeIcon.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1CompositeIcon.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:C1.UWP.Core.C1FontIcon">
            <summary>
            Represents an icon created from a font.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1FontIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1FontIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1FontIcon.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1FontIcon.Text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="T:Windows.UI.Xaml.Media.FontFamily"/>.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1VectorIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1VectorIcon._geometry">
            <summary>
            Gets the geometry of the vector.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1VectorIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1VectorIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1VectorIcon.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1VectorIcon.FinalizeUI">
            <summary>
            Finalizes the user interface.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1VectorIcon.ViewBox">
            <summary>
            Gets or sets the rectangle (in the path coordinates) which will determine what part will be drawn.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1VectorIcon.StrokeThickness">
            <summary>
            The stroke thickness
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1VectorIcon.StrokeBrush">
            <summary>
            Gets or sets the color of the stroke.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1VectorIcon.UpdateGeometry">
            <summary>
            This will recreate the geometry and update the path.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1VectorIcon.CreateGeometry">
            <summary>
            This method is called to create the geometry of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.C1PathIcon">
            <summary>
            Represent an icon created from a path string.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1PathIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1PathIcon"/> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1PathIcon.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1PolygonIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1PolygonIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1PolygonIcon" /> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1PolygonIcon.Points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1PolygonIcon.IsClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1BitmapIcon">
            <summary>
            Represents an icon created from an image.
            </summary>
            <remarks>
            The file that you use should be a solid image on a transparent background.
            The bitmap image is expected to be a true bitmap that has transparent pixels and non-transparent pixels.
            The recommended format is PNG. Other file-format image sources will load but result in a solid block of the foreground color.
            </remarks>
        </member>
        <member name="M:C1.UWP.Core.C1BitmapIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1BitmapIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1BitmapIcon.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1BitmapIcon.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1BitmapIcon.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1IconTemplate">
            <summary>
            This factory allows creating <see cref="T:C1.UWP.Core.C1Icon"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1IconTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1IconTemplate"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1IconTemplate.#ctor(System.Func{C1.UWP.Core.C1Icon})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1IconTemplate" /> class.
            </summary>
            <param name="createIcon">The function that creates the icon. New instances must be created every time.</param>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.Template">
            <summary>
            Gets or sets the template containing the icon.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1IconTemplate.CreateIcon">
            <summary>
            Creates a new icon.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.Edit">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.Asterisk">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ArrowUp">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ArrowDown">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ChevronUp">
            <summary>
            Gets an icon representing a chevron pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ChevronDown">
            <summary>
            Gets an icon representing a chevron pointing down.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ChevronLeft">
            <summary>
            Gets an icon representing a chevron pointing to the left.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.ChevronRight">
            <summary>
            Gets an icon representing a chevron pointing to the right.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleNorth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleNorthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north east.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing east.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleSouthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south east.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleSouth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing down.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleSouthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south west.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing west.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleNorthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north west.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing upwards.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleRightUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleRight">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleRightDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right down.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing downwards.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleLeftDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left down.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleLeft">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.TriangleLeftUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left up.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1IconTemplate.Star5">
            <summary>
            Gets an icon representing a 5-pointed star.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ThemeInfo">
            <summary>
            This class allows accessing theme-related properties.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ThemeInfo.ApplicationTheme">
            <summary>
            Gets the application-level theme.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ThemeInfo.IsDark">
            <summary>
            Gets a value indicating whether the theme is dark.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ThemeInfo.Background">
            <summary>
            Gets the background color of the theme.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ThemeInfo.Foreground">
            <summary>
            Gets the text color of the theme.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Null">
            C1DataTypeNull.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Object">
            C1DataTypeObject.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.String">
            C1DataTypeString.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Number">
            C1DataTypeNumber.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Boolean">
            C1DataTypeBoolean.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Date">
            C1DataTypeDate.
        </member>
        <member name="F:C1.UWP.Core.C1DataType.Array">
            C1DataTypeArray.
        </member>
        <member name="T:C1.UWP.Core.AsyncEventArgs">
            <summary>
            Provides event data for asynchronous events.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.AsyncEventArgs.Awaiter">
            <summary>
            Gets the deferrals awaiter.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the complete method.
            </remarks>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgs.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.AsyncEventArgsDeferralsAwaiter">
            <summary>
            Deferrals awaiter used to wait for the deferrals of an async event.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgsDeferralsAwaiter.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the complete method.
            </remarks>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgsDeferralsAwaiter.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.AsyncEventArgsDeferral">
            <summary>
            Deferral used to block the event until <see cref="M:C1.UWP.Core.AsyncEventArgsDeferral.Complete"/> method is called. 
            </summary>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgsDeferral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.AsyncEventArgsDeferral"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.AsyncEventArgsDeferral.Complete">
            <summary>
            Notifies the event the handler is ready to continue.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.ColorEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.IsDefaultColor(Windows.UI.Xaml.Media.Brush)">
            <summary>
            Determines whether the specified color is the default color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.Cascade(System.Func{Windows.UI.Xaml.Media.Brush}[])">
            <summary>
            Returns the first color different from the default.
            </summary>
            <param name="colors">The list of colors to look up.</param>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="a">The alpha channel.</param>
            <param name="r">The Red component.</param>
            <param name="g">The Green component.</param>
            <param name="b">The Blue component.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.GetARGB(Windows.UI.Xaml.Media.Brush,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Gets the ARGB components of a color.
            </summary>
            <param name="color">The color.</param>
            <param name="a">The alpha channel.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.WithAlpha(Windows.UI.Xaml.Media.Brush,System.Byte)">
            <summary>
            Creates a new color modifying the alpha channel.
            </summary>
            <param name="color">The color.</param>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.Blend(Windows.UI.Xaml.Media.Brush,Windows.UI.Xaml.Media.Brush,System.Double)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">The color to blend onto the <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            “on top of” <paramref name="backgroundColor"/>.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.ToArgb(Windows.UI.Color)">
            <summary>
            Convert a  <see cref="T:Windows.UI.Color"/> to a int value.
            </summary>
            <param name="clr">Color object</param>
            <returns>A int value that indicated the color</returns>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.RGBtoHSV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.HSVtoRGB(System.Single@,System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.UWP.Core.ColorEx.GetIntColor(System.Object)">
            <summary>
            Convert color in platforms to a int color.
            </summary>
            <param name="color">Color in each platform.</param>
            <returns>a color defined in a int value.</returns>
        </member>
        <member name="T:C1.UWP.Core.DeviceEx">
            <summary>
            Provides information about the device
            </summary>
        </member>
        <member name="P:C1.UWP.Core.DeviceEx.RuntimePlatform">
            <summary>
            Gets the runtime platform.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.DeviceEx.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.DeviceEx.DeviceOrientation">
            <summary>
            Gets the device orientation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.DeviceEx.ScreenDensity">
            <summary>
            Gets the screen density.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.DeviceEx.ScreenPPI">
            <summary>
            Gets the number of pixels per inch of the screen.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.DeviceType">
            <summary>
            Indicates which device type the forms are running on.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceType.Phone">
            <summary>
            Indicates that the device is a phone.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceType.Desktop">
            <summary>
            Indicates that the device is desktop.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceType.Other">
            <summary>
            Indicates the type of device is unknown.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.DeviceOrientation">
            <summary>
            Indicates device Orientation.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceOrientation.Undefined">
            <summary>
            Indicates device Orientation is Undefined.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceOrientation.Landscape">
            <summary>
            Indicates device Orientation is Landscape.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.DeviceOrientation.Portrait">
            <summary>
            Indicates device Orientation is Portrait.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.FrameworkElementEx">
            <summary>
            The extension of <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.FrameworkElementEx._bindingMarker">
            <summary>
            Identifies our own bindings.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.FrameworkElementEx.SetBinding(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,System.Object,System.String,Windows.UI.Xaml.Data.IValueConverter,System.Boolean,Windows.UI.Xaml.Data.BindingMode)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.IEnumerableEx">
            <summary>
            Provides convenience method for working with LINQ and enumberables
            </summary>
        </member>
        <member name="M:C1.UWP.Core.IEnumerableEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for each collection item
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">enumeration to process</param>
            <param name="action">action to perform</param>
        </member>
        <member name="M:C1.UWP.Core.IEnumerableEx.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Returns the maximum number in the sequence or default if not items in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.IEnumerableEx.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns the maximum number in the sequence or default if not items in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.ShapeEx.CreatePolygon(System.Double[])">
            <summary>
            Creates a polygon (used to create sort and tree glyphs).
            </summary>
            <param name="values">Array with X and Y coordinates of the points that define the polygon.</param>
            <returns>A polygon with the specified background and geometry.</returns>
        </member>
        <member name="T:C1.UWP.Core.ThemeEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.IsDark">
            <summary>
            Gets a value indicating whether the app is using a dark theme.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.BackgroundColor">
            <summary>
            Gets the color of the theme background.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.ForegroundColor">
            <summary>
            Gets the color of the theme foreground.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.AccentBackground">
            <summary>
            Gets the accent background.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.AccentForeground">
            <summary>
            Gets the accent foreground.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.SelectionBackgroundColor">
            <summary>
            Gets the selection background.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.SelectionForegroundColor">
            <summary>
            Gets the selection foreground.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.CursorBackgroundColor">
            <summary>
            Gets the cursor background.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.CursorForegroundColor">
            <summary>
            Gets the cursor foreground.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.EditorBackgroundColor">
            <summary>
            Gets the color of the theme used to pain the background of the editors.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.EditorForegroundColor">
            <summary>
            Gets the color of the theme used to pain the foreground of the editors.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.HeaderBackgroundColor">
            <summary>
            Gets the color of the theme used to pain the headers.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.HeaderForegroundColor">
            <summary>
            Gets the color of the theme used to pain the headers foreground.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ThemeEx.BorderColor">
            <summary>
            Gets the color of the theme used to pain the borders.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.ViewEx">
            <summary>
            View extensions
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ViewEx.GetChildren(Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            Finds all the children of a given <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ViewEx.GetImage(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Get the byte array of the control image.
            This byte array comes from a UIImagePNGRepresentation in iOS, TrueColorAlpha of PNG format in WP, Bitmap in Android.
            </summary>
            <returns>A byte array with certain image format.</returns>
        </member>
        <member name="T:C1.UWP.Core.C1DragHelper">
            <summary>
            Cross-platform helper for listening to drag gestures supporting inertia.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1DragHelper.#ctor(Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.C1DragHelperMode,System.Nullable{System.Double},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.UWP.Core.C1DragHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.FrameworkElement"/> on which the drag gesture will be listened.</param>
            <param name="mode">Indicates the sort of drag to be listened. Combine inertia flag with other flags so that DragDelta events are raised after the manipulation finish. i.e. C1DragHelperMode.FreeDrag | C1DragHelperMode.Inertia</param>
            <param name="initialThreshold">Specifies the number of pixels the gesture will have to pass in order to start. if 0 is set the gesture will start on pointer down, and captureElementOnPointerPressed will be true despite the specified parameter, otherwise the gesture will start on mouse move, default value is 1</param>
            <param name="captureElementOnPointerPressed">Indicates whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in UWP) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in UWP). If initialThreshold is 0 this parameter will be ignored.<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks></param>
            <param name="handledEventsToo">Indicates whether drag gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise it will use Pointer events.</param>
            <param name="useRightButton">if set to <c>true</c> it will listen to mouse right button down/up events instead of left button events(In UWP it only applies if useManipulationEvents is set to false).</param>
            <param name="startByHolding">if set to <c>true</c> the drag action will be initiated by a hold operation .</param>
        </member>
        <member name="E:C1.UWP.Core.C1DragHelper.DragPreview">
            <summary>
            Occurs before a drag gesture starts giving the user the opportunity to configure the kind of gesture that will be listened based on the point where the manipulation started.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1DragHelper.DragStarted">
            <summary>
            Occurs when a drag gesture started.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1DragHelper.DragDelta">
            <summary>
            Occurs while a drag gesture is performed.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1DragHelper.DragCompleted">
            <summary>
            Occurs after a drag gesture completed.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1DragHelper.DragInertiaStarted">
            <summary>
            Occurs when the inertia is about to start.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1DragHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers and releases captured element.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1DragHelper.Complete">
            <summary>
            Finalizes drag gesture.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragEventArgs">
            <summary>
            Contains information of the drag events.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragEventArgs.DragHelper">
            <summary>
            Gets a reference to the <see cref="T:C1.UWP.Core.C1DragHelper"/> that originated the event.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragPreviewEventArgs">
            <summary>
            Contains information of the DragStarting event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.StartByHolding">
            <summary>
            Gets or sets a value indicating whether drag will be initiated by a hold operation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.Mode">
            <summary>
            Gets or sets the mode indicating the sort of drag to be listened.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.CaptureElementOnPointerPressed">
            <summary>
            Gets or sets a value indicating whether the element will be captured in pointer pressed event (MouseLeftButtonDown in SL and WPF and PointerPressed in UWP) or in the first pointer move event (MouseMove in SL and WPF and PointerMoved in UWP).<remarks>Capturing the element on mouse down will cause Click, DoubleClick and MouseLeftButtonUp events not to be fired in sub-elements (nested elements in the visual tree), whereas capturing the element on the first mouse move can make it difficult for final users to drag small elements quickly.</remarks>
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.InitialThreshold">
            <summary>
            Gets or sets the number of pixels the gesture will have to pass in order to start.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the recognizion of this gesture is canceled.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragPreviewEventArgs.Origin">
            <summary>
            Gets the position of original touch point.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragStartedEventArgs">
            <summary>
            Contains information of the DragStarted event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragStartedEventArgs.Origin">
            <summary>
            Gets the absolute point where the gesture started.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragStartedEventArgs.Direction">
            <summary>
            Gets the initial direction of the drag gesture.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragDeltaEventArgs">
            <summary>
            Contains information of the DragDelta event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragDeltaEventArgs.IsInertial">
            <summary>
            Gets a value indicating whether this event is raised because of a direct manipulation or is inertial.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragDeltaEventArgs.Velocities">
            <summary>
            Gets the velocity of the inertia.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1DragDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragInertiaStartedEventArgs">
            <summary>
            Contains information of the DragInertiaStarted event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragInertiaStartedEventArgs.Velocity">
            <summary>
            Gets the velocity of the gesture before the inertia started.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragInertiaStartedEventArgs.DesiredDeceleration">
            <summary>
            Gets or sets the deceleration of the drag inertia (pixels by millisecond)
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragCompletedEventArgs">
            <summary>
            Contains information of the DragCompleted event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1DragCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether the drag gesture was cancelled.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1DragHelperMode">
            <summary>
            Determines the kind of drag gesture that will be listened.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.TranslateX">
            <summary>
            The drag will be performed only considering x coordinates.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.TranslateY">
            <summary>
            The drag will be performed only considering y coordinates.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.TranslateXY">
            <summary>
            Both x and y coordinates will be considered in the gesture.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.Inertia">
            <summary>
            Apply inertia when drag finish.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.TranslateRailX">
            <summary>
            The drag will be performed in the x coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1DragHelperMode.TranslateRailY">
            <summary>
            The drag will be performed in the y coordinates if it starts in this direction.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1InputEventArgs">
            <summary>
            Contains information about gesture events.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.#ctor(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.#ctor(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.RoutedEventArgs,C1.UWP.Core.C1PointerDeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="pointerType">Type of the pointer.</param>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.#ctor(Windows.UI.Xaml.RoutedEventArgs,C1.UWP.Core.C1PointerDeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="pointerType">Type of the pointer.</param>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs">
            <summary>
            Gets the arguments of the original event which raised this event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.PointerDeviceType">
            <summary>
            Gets the type of pointer which performed the action.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.GetPosition(Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the position of the pointer performing the drag gesture relatively to the specified element.
            </summary>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.IsShiftPressed">
            <summary>
            Gets whether shift key is pressed.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1InputEventArgs.IsCtrlPressed">
            <summary>
            Gets whether ctrl key is pressed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.GetPosition(Windows.UI.Xaml.RoutedEventArgs,Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the position of the pointer or finger.
            </summary>
            <param name="args">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs" /> instance containing the manipulation data.</param>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.GetPointerType(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Gets the type of the pointer.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.GetIsHandled(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Gets a value indicating whether the specified event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.SetIsHandled(Windows.UI.Xaml.RoutedEventArgs,System.Boolean)">
            <summary>
            Sets whether the event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.UWP.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="handled"><c>true</c> if the event is handled.</param>
        </member>
        <member name="M:C1.UWP.Core.C1InputEventArgs.HitTest``1(System.Double)">
            <summary>
            Returns the first visual element which is hit by this event.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.C1PointerDeviceType">
            <summary>
            Enumerates the different kind of devices which can perform drag operations.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1PointerDeviceType.Mouse">
            <summary>
            Mouse device
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1PointerDeviceType.Touch">
            <summary>
            Touch screen
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1PointerDeviceType.Pen">
            <summary>
            Pen device
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ScrollHelper">
            <summary>
            Cross-platform helper for listening to scroll gestures using mouse wheel.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ScrollHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.UWP.Core.C1ScrollHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the zoom gesture will be listened.</param>
            <param name="avoidIfCtrlPressed">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousScroll">If set to true it will raise intermediate events to perform a continuous scroll, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.UWP.Core.C1ScrollHelper.ScrollStarted">
            <summary>
            Occurs when a scroll gesture started.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ScrollHelper.ScrollDelta">
            <summary>
            Occurs while a scroll gesture is performed.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ScrollHelper.ScrollCompleted">
            <summary>
            Occurs after a scroll gesture completed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ScrollHelper.FinalizeScroll">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ScrollHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ScrollEventArgs">
            <summary>
            Contains information of the scroll events.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ScrollStartedEventArgs">
            <summary>
            Contains information of the ScrollStarted event.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ScrollDeltaEventArgs">
            <summary>
            Contains information of the ScrollDelta event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ScrollDeltaEventArgs.DeltaScroll">
            <summary>
            Gets the delta scroll.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ScrollDeltaEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ScrollDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ScrollCompletedEventArgs">
            <summary>
            Contains information of the ScrollCompleted event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ScrollCompletedEventArgs.CumulativeScroll">
            <summary>
            Gets the accumulated scroll.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1TapHelper">
            <summary>
            Cross-platform helper for listening to tapped and double-tapped events.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1TapHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1TapHelper"/> class.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the tap gestures will be listened.</param>
            <param name="handledEventsToo">Indicates whether tap gestures will be listened despite mouse events were already handled. (It only applies to mouse gestures)</param>
            <param name="raiseTapOnPointerPressed">Raise the <see cref="E:C1.UWP.Core.C1TapHelper.Tapped"/> event when the mouse or pen is pressed.</param>
            <param name="useManipulationEvents">When set to true it uses Manipulation events to listen to the gesture, otherwise it will use Pointer events.</param>
        </member>
        <member name="M:C1.UWP.Core.C1TapHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1TapHelper.ManipulationStarted">
            <summary>
            Occurs when one or more fingers get in contact with the screen or mouse button was pressed.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1TapHelper.ManipulationCompleted">
            <summary>
            Occurs when the fingers are lift from the screen or mouse button was released.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1TapHelper.Tapped">
            <summary>
            Occurs when the element is tapped (clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1TapHelper.DoubleTapped">
            <summary>
            Occurs when the element is double-tapped (double-clicked if performed with the mouse).
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1TapHelper.Holding">
            <summary>
            Occurs when a Hold gesture is performed over the element.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1TapHelper.InsideTouchThreshold(C1.UWP.Core.C1PointerDeviceType,Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns true if the distance between specified points in less or equal to the tap threshold.
            </summary>
            <param name="deviceType">The kind of device.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.C1TappedEventArgs">
            <summary>
            Contains information of the tap events.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1TappedEventArgs.#ctor(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.RoutedEventArgs,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1TappedEventArgs" /> class.
            </summary>
            <param name="element">Element where the gesture is being listened.</param>
            <param name="originalArgs">The <see cref="T:Windows.UI.Xaml.RoutedEventArgs" /> instance containing the event data.</param>
            <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
            <param name="isDown">if set to <c>true</c> the event was performed with the mouse down.</param>
        </member>
        <member name="P:C1.UWP.Core.C1TappedEventArgs.IsRightTapped">
            <summary>
            Gets a value indicating whether the event is performed with the right button of the mouse.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1TappedEventArgs.IsDown">
            <summary>
            Gets a value indicating whether the event is performed with the mouse down.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1TappedEventArgs.IsBarrelButtonDown">
            <summary>
            Gets a value indicating whether the barrel button of the pen is pressed.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ZoomHelper">
            <summary>
            Cross-platform helper for listening to zoom gestures either using the mouse or fingers.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ZoomHelper.#ctor(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:C1.UWP.Core.C1ZoomHelper"/>.
            </summary>
            <param name="element">An <see cref="T:Windows.UI.Xaml.UIElement"/> on which the zoom gesture will be listened.</param>
            <param name="ctrlRequired">Sets whether is required to press Ctrl key in order to start the gesture.</param>
            <param name="continuousZoom">If set to true it will raise intermediate events to perform a continuous zoom, otherwise the events will be raised from native mouse wheel events.</param>
            <param name="handleMouseWheel">Sets whether Handled property of mouse wheel events will be set to true.</param>
        </member>
        <member name="E:C1.UWP.Core.C1ZoomHelper.ZoomStarted">
            <summary>
            Occurs when a zoom gesture started.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ZoomHelper.ZoomDelta">
            <summary>
            Occurs while a zoom gesture is performed.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ZoomHelper.ZoomCompleted">
            <summary>
            Occurs after a zoom gesture completed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ZoomHelper.FinalizeHelper">
            <summary>
            Detaches all the events handlers.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ZoomEventArgs">
            <summary>
            Contains information of the zoom events.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ZoomStartedEventArgs">
            <summary>
            Contains information of the ZoomStarted event.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ZoomDeltaEventArgs">
            <summary>
            Contains information of the ZoomDelta event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.DeltaScale">
            <summary>
            Gets the delta scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.UniformDeltaScale">
            <summary>
            Gets the uniform delta scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.DeltaTranslation">
            <summary>
            Gets the delta translation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomDeltaEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ZoomDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1ZoomCompletedEventArgs">
            <summary>
            Contains information of the ZoomCompleted event.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomCompletedEventArgs.CumulativeScale">
            <summary>
            Gets the accumulated scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomCompletedEventArgs.UniformCumulativeScale">
            <summary>
            Gets the uniform cumulative scale.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ZoomCompletedEventArgs.CumulativeTranslation">
            <summary>
            Gets the accumulated translation.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.RenderEngineEx.SetPan(C1.UWP.Core.RenderEngine,System.Double,System.Double)">
            <summary>
            Sets the pan.
            </summary>
            <param name="renderEngine">the render engine.</param>
            <param name="panX">pan in X-Axis.</param>
            <param name="panY">pan in Y-Axis.</param>
        </member>
        <member name="M:C1.UWP.Core.RenderEngineEx.SetScale(C1.UWP.Core.RenderEngine,System.Double,System.Double)">
            <summary>
            Sets the scale.
            </summary>
            <param name="renderEngine">the render engine.</param>
            <param name="scaleX">scale in X-Axis.</param>
            <param name="scaleY">scale in Y-Axis.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetStroke(System.Object)">
            <summary>
            Sets the current stroke brush.
            </summary>
            <param name="brush">Native brush or argb color as integer.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetStrokeThickness(System.Double)">
            <summary>
            Sets the stroke thickness.
            </summary>
            <param name="thickness"></param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetStrokePattern(System.Double[])">
            <summary>
            Sets the stroke pattern.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetFill(System.Object)">
            <summary>
            Sets the fill brush.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetOpacity(System.Object,System.Double)">
            <summary>
            Changes the brush opacity.
            </summary>
            <param name="brush">Brush object</param>
            <param name="opacity">Opacity</param>
            <returns>Brush object</returns>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetFont(C1.UWP.Core.C1Font)">
            <summary>
            Sets the font.
            </summary>
            <param name="font">Native font object.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line between two points using current stroke attributes.
            </summary>
            <param name="x1">x-coordinate of first point.</param>
            <param name="y1">y-coordinate of first point.</param>
            <param name="x2">x-coordinate of second point.</param>
            <param name="y2">y-coordinate of second point.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawLines(System.Double[],System.Double[])">
            <summary>
            Draw lines using specified coordinates.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw rectangle with currect stroke and fill.
            </summary>
            <param name="x">x-coordinate of rectangle.</param>
            <param name="y">y-coordinate of rectangle.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawPolygon(System.Double[],System.Double[])">
            <summary>
            Draw polygon with currect stroke and fill.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw ellipse with currect stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawImage(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image using special source.
            </summary>
            <param name="source">the source of image.</param>
            <param name="x">x-coordinate of image.</param>
            <param name="y">y-coordinate of image.</param>
            <param name="w">Image width.</param>
            <param name="h">Image height.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.MeasureString(System.String)">
            <summary>
            Measures size of string.
            </summary>
            <param name="s">String to measure.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawString(System.String,Windows.Foundation.Point)">
            <summary>
            Draw string at specified position.
            </summary>
            <param name="s">String to draw.</param>
            <param name="pos">ChartPositionType.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawStringRotated(System.String,Windows.Foundation.Point,Windows.Foundation.Point,System.Double)">
            <summary>
            Draw rotated string at specified position.
            </summary>
            <param name="s"></param>
            <param name="pos"></param>
            <param name="center"></param>
            <param name="angle"></param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.SetClipRect(System.Nullable{Windows.Foundation.Rect})">
            <summary>
            Sets clip rectangle.
            </summary>
            <param name="rect">Clip rectangle. Null clear clipping rectangle.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawPieSegment(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws pie segment at specified point.
            </summary>
            <param name="cx">X-coordinate.</param>
            <param name="cy">Y-coordinate.</param>
            <param name="radius">Radius.</param>
            <param name="angle">Angle.</param>
            <param name="sweep">Sweep angle.</param>
        </member>
        <member name="M:C1.UWP.Core.IRenderEngine.DrawDonutSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws donut segment at specified point.
            </summary>
            <param name="cx">X-coordinate.</param>
            <param name="cy">Y-coordinate.</param>
            <param name="radius">Radius.</param>
            <param name="innerRadius">Inner radius.</param>
            <param name="angle">Angle.</param>
            <param name="sweep">Sweep angle.</param>
            <param name="reversedAngle">Rendering with reversed angle.</param>
        </member>
        <member name="M:C1.UWP.Core.RenderEngine.DrawImageWithStream(System.IO.Stream,C1.Util.DX.RectF)">
            <summary>
            Draw image from stream to destination rect
            </summary>
            <param name="stream"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:C1.UWP.Core.RenderEngine.CreateGeometry">
            <summary>
            Creates a PathGeometry object, the caller must dispose this object when done using
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.RenderEngine.DrawAndFillGeometry(C1.Util.DX.Direct2D.PathGeometry)">
            <summary>
            Draws and fills the specified geometry
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:C1.UWP.Core.RenderEngine.GetPathGeometry(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Create a PathGeometry.
            </summary>
            <param name="xs">The collection of Point.X</param>
            <param name="ys">The collection of Point.Y</param>
            <param name="close">Determines whether the vector graphics is closed or not.</param>
        </member>
        <member name="T:C1.UWP.Core.DefaultValueConverter">
            <summary>
            Converts a value into a specified type.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.IComponent.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.DateTimeEx.FromOADate(System.Double)">
            <summary>
            Returns a System.DateTime equivalent to the specified OLE Automation date.
            </summary>
            <param name="d">An OLE Automation date value.</param>
            <returns>An object that represents the same date and time as the d parameter.</returns>
        </member>
        <member name="M:C1.UWP.Core.DateTimeEx.ToOADate(System.DateTime)">
            <summary>
            Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <param name="date">The date that will be converted</param>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        </member>
        <member name="M:C1.UWP.Core.DoubleEx.EqualsOrBothNanOrInfinity(System.Double,System.Double)">
            <summary>
            Returns true when both numbers are equal or both are Nan or both are PositiveInfinity or both are NegativeInfinity.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:C1.UWP.Core.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.UWP.Core.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0,Windows.UI.Xaml.Data.IValueConverter,System.Object,System.String)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
            <param name="converter">Converter to use when setting the property.</param>
            <param name="converterParameter">Parameter passed to the converter.</param>
            <param name="culture">Culture information to use when converting values.</param>
        </member>
        <member name="M:C1.UWP.Core.RectEx.Union(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Returns a new rectangle exactly enough to contain the specified rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.StringEx.SplitCamel(System.String,System.Boolean)">
            <summary>
            Insert spaces between words identified by the camel nomenclature.
            </summary>
            <param name="s">The original string.</param>
            <param name="capitalizeFirst">When set to true the resulting string will have its first word capitalized despite the original string capitalization.</param>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.TypeEx">
            <summary>
            The <see cref="T:C1.UWP.Core.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.ReadStaticField``1(System.Type,System.String)">
            <summary>
            Return a static field value by name using reflection.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.UWP.Core.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="T:C1.UWP.Core.C1LicensedControlAttribute">
            <summary>
            Marks a control class that must depend on C1 license
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1LicensedControlAttribute.#ctor">
            <summary>
            Constructs an entity of C1LicensedControlAttribute
            </summary>
        </member>
        <member name="T:C1.UWP.Core.LicenseManager">
            <summary>
            Allows the users to set a license in the <see cref="P:Key"/> property.
            </summary>
            <remarks>
            See https://www.grapecity.com/licensing/componentone for more information.
            </remarks>
        </member>
        <member name="T:C1.UWP.Core.C1Animation">
            <summary>
            Contains information about a specific animation.      
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Animation.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1Animation"/>.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Animation.StartDelay">
            <summary>
            Gets or sets the elapsed time before the animation starts.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Animation.Duration">
            <summary>
            Gets or sets the duration time of the animation.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Animation.Easing">
            <summary>
            Gets or sets the easing funtion used to interpolate the values of the animation.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1Easing">
            <summary>
            Easing function used to interpolate the values of an animation.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1Easing"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1Easing"/>.
            </summary>
            <param name="function">Easing function.</param>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.#ctor(Windows.UI.Xaml.Media.Animation.EasingFunctionBase)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1Easing"/>.
            </summary>
            <param name="easeFunction">Function used to interpolate the animation.</param>
        </member>
        <member name="P:C1.UWP.Core.C1Easing.CircleOut">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Easing.CircleIn">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1Easing.Linear">
            <summary>
            Gets a linear easing function.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.Ease(System.Double)">
            <summary>
            Applies the easing function to the specified value input.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.GetEasingFunction">
            <summary>
            Gets the easing function.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1Easing.op_Implicit(Windows.UI.Xaml.Media.Animation.EasingFunctionBase)~C1.UWP.Core.C1Easing">
            <summary>
            Allows assigning a <see cref="T:C1.UWP.Core.C1Easing"/> from a Xamarin Forms counterpart.
            </summary>
            <param name="easing"></param>
        </member>
        <member name="T:C1.UWP.Core.C1ToggleButton">
            <summary>
            Represents a button that a user can expand and collapse.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Core.C1ToggleButton"/> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the <see cref="T:C1.UWP.Core.C1ToggleButton"/> is checked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.CheckedText">
            <summary>
            Gets or sets the text show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.UncheckedText">
            <summary>
            Gets or sets the text shown when the button is unchecked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.CheckedImageSource">
            <summary>
            Gets or sets the image show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.UncheckedImageSource">
            <summary>
            Gets or sets the image shown when the button is unchecked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.CheckedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1ToggleButton.UncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ToggleButton.Checked">
            <summary>
            Occurs after the value of checkBox changes
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ToggleButton.OnChecked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Checked" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.UWP.Core.C1ToggleButton.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1ToggleButton.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1BitmapSource.BitmapStream">
            <summary>
            Gets or sets a value to be bitmap stream. This stream contains all information about the bitmap, including size, pixel data.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1BitmapSource.Width">
            <summary>
            Gets or sets a value to be bitmap width
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1BitmapSource.Height">
            <summary>
            Gets or sets a value to be bitmap height
            </summary>
        </member>
        <member name="T:C1.UWP.Core.MessageBoxResult">
            <summary>
            Represents a user's response to a message box.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.MessageBoxResult.None">
            <summary>
            No result.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.MessageBoxResult.OK">
            <summary>
            The user clicked the OK button.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.MessageBoxResult.Cancel">
            <summary>
            The user clicked the Cancel button or pressed ESC.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1FullscreenDialog">
            <summary>
            Shows content as a fullscreen modal dialog.
            </summary>	
            <remarks>This control doesn't contain any visual UI such as window header or buttons. If it is required, it should be implemented in the content.</remarks>
        </member>
        <member name="P:C1.UWP.Core.C1FullscreenDialog.Popup">
            <summary>
            Get the <see cref="P:C1.UWP.Core.C1FullscreenDialog.Popup"/> of <see cref="T:C1.UWP.Core.C1FullscreenDialog"/>.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1FullscreenDialog.Closed">
            <summary>
            Event fired when the window is closed by the user or the <see cref="M:C1.UWP.Core.C1FullscreenDialog.Close"/> method.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1FullscreenDialog.Closing">
            <summary>
            Event fired when the window is about to close, allows the handler to stop the window from being closed.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1FullscreenDialog.DialogResult">
            <summary>
            Gets or sets the dialog result for the window.
            </summary>
            <remarks>
            Setting this property to a value other than "None" automatically closes the window. 
            </remarks>
        </member>
        <member name="F:C1.UWP.Core.C1FullscreenDialog.DialogResultProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1FullscreenDialog.DialogResult"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1FullscreenDialog.HideStatusBarWhenOpen">
            <summary>
            Gets or sets a value indicating whether the status bar must be hidden when the popup is open.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1FullscreenDialog.HideStatusBarWhenOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1FullscreenDialog.HideStatusBarWhenOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1FullscreenDialog.IsOpen">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.UWP.Core.C1FullscreenDialog"/> is opened.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1FullscreenDialog.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1FullscreenDialog"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1FullscreenDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1FullscreenDialog.Show">
            <summary>
            Opens the window as modal.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:C1.UWP.Core.ResourceManager"/>.
            </summary>
            <param name="multithreaded">Indicates if the resources can be used from multiple threads.</param>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.EnsureResourcesCreated">
            <summary>
            Call this method before accessing any properties.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.RecreateDeviceResources">
            <summary>
            Creates or re-creates the GPU resources.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.DiscardDeviceResources">
            <summary>
            Releases GPU resources.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.TrimDxgiDevice">
            <summary>
            This method must be executed when the application is suspending,
            to avoid reporting an issue by Windows App Certification Kit.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.ResourceManager.Dispose">
            <summary>
            Discards all device and device-independent resources.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.Multithreaded">
            <summary>
            Indicates if the resources can be used from multiple threads.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.D2dContext">
            <summary>
            Gets a reference to ID2D1DeviceContext1 object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.D2dFactory">
            <summary>
            Gets a reference to ID2D1Factory2 object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.DwFactory">
            <summary>
            Gets a reference to IDWriteFactory2 object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.WicFactory">
            <summary>
            Gets a reference to IWICImagingFactory2 object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.DxgiDevice">
            <summary>
            Gets a reference to IDXGIDevice object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.D2dDevice">
            <summary>
            Gets a reference to ID2D1Device1 object.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.ResourceManager.ResourceVersion">
            <summary>
            Gets the value that increases after each re-creation of the device resources.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1SideRadiusConverter">
            <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1SideRadiusConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:C1.UWP.Core.C1SideRadiusConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts back a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:C1.UWP.Core.ColorConverter">
            <summary>
            Converts between Colors and Brushes.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.BindingEx.Execute``1(Windows.UI.Xaml.Data.Binding,System.Object)">
            <summary>
            Simulates the evaluation of a binding using reflection.
            </summary>
            <param name="binding">The binding.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.ControlEx.GoToState(Windows.UI.Xaml.Controls.Control,System.String,System.Boolean)">
            <summary>
            Tries to go to a new state and throws a friendly error message
            </summary>
            <param name="control">Control that is going to change the state.</param>
            <param name="stateName">Name of the state.</param>
            <param name="useTransitions">Use transitions or not.</param>
        </member>
        <member name="M:C1.UWP.Core.DesignModeEx.IsInDesignMode(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets an indication whether the specified object lives in a design-time environment.
            </summary>
            <param name="obj">
            Object to check.
            </param>
            <returns>
            True if object is in design-time mode; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.UWP.Core.UIElementEx.C1GetRootVisual(Windows.UI.Xaml.UIElement)">
            <summary>
            [Platform safe] Gets the visual root of the current Application.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.WriteableBitmapEx">
            <summary>
            The extension of <see cref="T:Windows.UI.Xaml.Media.Imaging.WriteableBitmap"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.WriteableBitmapEx.ToArray(Windows.UI.Xaml.Media.Imaging.WriteableBitmap)">
            <summary>
            Set <see cref="T:Windows.UI.Xaml.Media.Imaging.WriteableBitmap"/> pixel data into an array of pixels. 
            </summary>
            <param name="writeableBitmap">The <see cref="T:Windows.UI.Xaml.Media.Imaging.WriteableBitmap"/>.</param>
            <returns>The array of pixels.</returns>
        </member>
        <member name="T:C1.UWP.Core.C1ClearStyle">
            <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.MouseOverBrushProperty">
            <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetMouseOverBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetMouseOverBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the mouse over state.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.PressedBrushProperty">
            <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetPressedBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetPressedBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the pressed state.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.FocusBrushProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetFocusBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetFocusBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the focus state.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.DisabledBrushProperty">
            <summary>
            This attached property can modify the disabled visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetDisabledBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the disabled brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetDisabledBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the disabled brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the disabled state.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.ButtonBackgroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetButtonBackground(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetButtonBackground(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the background of clear style button.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.ButtonForegroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetButtonForeground(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetButtonForeground(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the foreground of clear style button.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.ButtonCornerRadiusProperty">
            <summary>
            This attached property can modify the corner radius of the buttons of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetButtonCornerRadius(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetButtonCornerRadius(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Sets the CornerRadius of the buttons.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.CaretBrushProperty">
            <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetCaretBrush(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetCaretBrush(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush)">
            <summary>
            Sets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the caret state.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.CornerRadiusProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetCornerRadius(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetCornerRadius(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Sets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.UWP.Core.C1ClearStyle.ScrollBarStyleProperty">
            <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.GetScrollBarStyle(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.C1ClearStyle.SetScrollBarStyle(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Style)">
            <summary>
            Sets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The style used in scrollbars.</param>
        </member>
        <member name="T:C1.UWP.Core.Anchor">
            <summary>
            Specifies an anchor point in a visual element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.Anchor.TopLeft">
            <summary>
            The top left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.Anchor.TopRight">
            <summary>
            The top right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.Anchor.BottomLeft">
            <summary>
            The bottom left corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.Anchor.BottomRight">
            <summary>
            The bottom right corner of the visual element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.Anchor.Center">
            <summary>
            The center of the visual element.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.AnchorMatching">
            <summary>
            Specifies an anchor matching between two elements.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.AnchorMatching.FixedElementAnchor">
            <summary>
            Anchor of the fixed element.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.AnchorMatching.MoveableElementAnchor">
            <summary>
            Anchor of the element that will be located.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.C1LoadXaml``1(System.String)">
            <summary>
            [Platform safe] Parses a well-formed XAML fragment and creates a corresponding Silverlight
            object tree, and returns the root of the object tree.
            </summary>
            <typeparam name="T">The type of the object to be parsed.</typeparam>
            <param name="strXaml">String that contains a valid XAML fragment.</param>
            <returns>The root object of the parsed Silverlight object tree.</returns>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.IsInVisualTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            [Platform safe] Determines whether the specified element is in visual tree.
            </summary>
            <param name="elem">The framework element.</param>
            <returns>
            	<c>true</c> if the specified element is in visual tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.C1BeginInvoke(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            [Platform safe] Invokes the begin invoke accessing the Dispatcher of the framework element.
            </summary>
            <param name="elem">The elem.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.C1GetLogicalFocusedElement(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            [Platform safe] Returns a logical focused element from a focus scope where the specified
            <paramref name="relativeToElement"/> is in.
            </summary>
            <param name="relativeToElement"></param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.GetKeyboardFocusedElement">
            <summary>
            [Platform safe] Returns an element with a keyboard focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.C1GetPlatformKeyCode(Windows.UI.Core.KeyEventArgs)">
            <summary>
            [Platform safe] Gets platform key code from a KeyEventArgs.
            </summary>
            <param name="e">The <see cref="T:Windows.UI.Core.KeyEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.AdjustContentControlTemplate(Windows.UI.Xaml.Controls.ControlTemplate)">
            <summary>
            [Platform safe] Adjusts, if possible, a ControlTemplate intended for the 
            ContentControl.Template property to make it functional in WPF, and returns a passed template
            reference. Do nothing in Silverlight, just returns a passed template.
            </summary>
            <param name="template"></param>
            <returns></returns>
            <remarks>
            This method resolves the following WPF specific problem: if a ControlTemplate assigned to the
            ContentControl.Template property has a not assigned TargetType property then a ContentPresenter
            element used in the template becomes non-functional. As a result an assignment of some UI to
            the ContentControl.Content property has no effect.
            <para>
            This method checks the ControlTemplate.TargetType property and assign it with ContentControl
            type if the property is not assigned yet.
            </para>
            <para>
            Note that this method works only if the template is not sealed yet, which usually means that it
            has not been applied somewhere at the moment. If the template is sealed then this method does 
            nothing.
            </para>
            </remarks>
        </member>
        <member name="M:C1.UWP.Core.PlatformIndependent.IsInDesignMode(Windows.UI.Xaml.DependencyObject)">
            <summary>
            [Platform safe] Gets an indication whether the specified object lives in a design-time environment.
            </summary>
            <param name="obj">
            Object to check.
            </param>
            <returns>
            True if object is in design-time mode; otherwise, false.
            </returns>
        </member>
        <member name="P:C1.UWP.Core.PlatformIndependent.IsWindowsPhoneDevice">
            <summary>
            Indicates whether the running device is windows phone device.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.PropertyChangedEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.PropertyChangedEventArgs`1.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.PropertyChangedEventArgs`1.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.VisibilityConverter">
            <summary>
            Represents a Binding converter that converts a <see cref="T:System.Boolean"/> value
            to the corresponding <see cref="T:Windows.UI.Xaml.Visibility"/> value.
            If ConverterParameter is not null, returns inverted value.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The language to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:C1.UWP.Core.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The language to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:C1.UWP.Core.C1KeyEventArgs">
            <summary>
            Substitutes Silverlight KeyEventArgs in key handlers to enable testing
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1RangeSlider">
            <summary>
            The C1RangeSlider control enables the end-user to select two values from a range by moving two Thumb controls along a track.
            </summary>	
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.LowerValue">
            <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.LowerValueProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.LowerValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.UpperValue">
            <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.UpperValueProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.UpperValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.ValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.ValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.ValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.Delay">
            <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.Interval">
            <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.Orientation">
            <summary>
            The Orientation of the C1RangeSlider.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1RangeSlider.OrientationChanged">
            <summary> 
            Event raised when the <see cref="P:Orientation"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.SmallValueChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.SmallValueChangeProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.SmallValueChange"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.RangeSliderBarVisibility">
            <summary>
            Gets or sets a value that indicates whether C1RangeSlider bar should be displayed.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.RangeSliderBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.RangeSliderBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.ScrollBehavior">
            <summary>
            Gets or sets how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.ScrollBehaviorProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.ScrollBehavior"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1RangeSlider.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.ValidationDecoratorStyle">
            <summary>
            Gets of set the <see cref="T:Windows.UI.Xaml.Style"/> used to validation decorator.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.UWP.Core.C1RangeSlider.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:Windows.UI.Xaml.Media.Brush" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.C1RangeSlider.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.UWP.Core.C1RangeSlider.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.UWP.Core.C1RangeSlider"/>.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.UWP.Core.C1RangeSlider"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="E:C1.UWP.Core.C1RangeSlider.UpperValueChanged">
            <summary>
            Fires when the <see cref="P:C1.UWP.Core.C1RangeSlider.UpperValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:UpperValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.UWP.Core.C1RangeSlider.LowerValueChanged">
            <summary>
            Fires when the <see cref="P:C1.UWP.Core.C1RangeSlider.LowerValue"/> property changes.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:LowerValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:C1.UWP.Core.C1RangeSlider.ValueChanged">
            <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ValueChanged" /> event.
            </summary>
            <param name="e">
            <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.UpdateTrackLayout">
            <summary> 
            This method will take the current min, max, and value to 
            calculate and layout the current control measurements.
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1RangeSlider.PixelsToUnits(System.Double)">
            <summary>
            Converts pixels to it´s corresponding unit value in the range slider
            </summary>
            <param name="pixels"></param>
            <returns></returns>
        </member>
        <member name="T:C1.UWP.Core.RangeSliderScrollBehavior">
            <summary>
            Specifies how thumbs will be moved when mouse click will be performed outside selected area.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.RangeSliderScrollBehavior.None">
            <summary>
            Both thumbs will not move.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.RangeSliderScrollBehavior.Thumb">
            <summary>
            Closest thumb will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="F:C1.UWP.Core.RangeSliderScrollBehavior.Range">
            <summary>
            Both thumbs will be moved to direction of mouse by a large distance.
            </summary>
        </member>
        <member name="T:C1.UWP.Core.C1_UWP_Core_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1_UWP_Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1_UWP_Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:C1.UWP.Core.C1_UWP_Core_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:C1.UWP.Input.C1CheckBox">
            <summary>
            Represents a control that a user can select and clear.
            </summary>
        </member>
        <member name="M:C1.UWP.Input.C1CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.UWP.Input.C1CheckBox"/> class.
            </summary>
        </member>
        <member name="P:C1.UWP.Input.C1CheckBox.Color">
            <summary>
            Gets or sets the color used to paint the control.
            </summary>
        </member>
        <member name="M:C1.UWP.Input.C1CheckBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Core.PopupUtil">
            <summary>
            Utility methods for popups.
            </summary>
        </member>
        <member name="M:C1.Core.PopupUtil.Position(Windows.UI.Xaml.Controls.Primitives.Popup,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor)">
            <summary>
            Positions a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement.</param>
        </member>
        <member name="M:C1.Core.PopupUtil.Position(Windows.UI.Xaml.Controls.Primitives.Popup,Windows.Foundation.Point)">
            <summary>
            Positions a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> in a specified absolute point.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="point">The popup position.</param>
        </member>
        <member name="M:C1.Core.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,Windows.Foundation.Point,System.Double,System.Double,Windows.UI.Xaml.FlowDirection)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <param name="flowDir">The FlowDirection used for the calculations.</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.Core.PopupUtil.GetPosition(Windows.UI.Xaml.UIElement,Windows.Foundation.Point)">
            <summary>
            return a absolute position according to the relative position of element
            </summary>
            <param name="element">the given element</param>
            <param name="point">the given relative position</param>
            <returns></returns>
        </member>
        <member name="M:C1.Core.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,Windows.Foundation.Point,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="elementOffset">The offset (absolute position) of the reference element.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="M:C1.Core.PopupUtil.TestPosition(Windows.UI.Xaml.Controls.Primitives.Popup,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.Core.PopupUtil.TestPosition(Windows.UI.Xaml.Controls.Primitives.Popup,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
            <param name="popup">The popup to position.</param>
            <param name="popupAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the Popup.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement.</param>
            <returns>The absolute point where the popup would be located</returns>
        </member>
        <member name="M:C1.Core.PopupUtil.TestPosition(Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,Windows.UI.Xaml.FrameworkElement,C1.UWP.Core.Anchor,System.Double,System.Double)">
            <summary>
            Calculates the position of a <see cref="T:Windows.UI.Xaml.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
            <param name="positionElement">The element to position.</param>
            <param name="positionAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the element to position.</param>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement" /> to use as reference.</param>
            <param name="elementAnchor">An <see cref="T:C1.UWP.Core.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
            <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
            <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
            <returns>The absolute point where the FrameworkElement would be located.</returns>
        </member>
        <member name="T:C1.Core.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.Core.Extensions.GetParentsPopup(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Includes the argument (if not null)
            When it finds an open Popup that has a parent it traverses up through the parent, not adding the popup to the list
            </summary>
        </member>
        <member name="M:C1.Core.Extensions.InvalidateVisualTree(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Core.Extensions.C1TransformToVisual(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)">
            <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.
            </summary>
            <remarks>
            This is an improved version of <see cref="T:Windows.UI.Xaml.UIElement"/>.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:Windows.UI.Xaml.Controls.Primitives.Popup"/>s.
            </remarks>
            <param name="element">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the source coordinates.</param>
            <param name="visual">The <see cref="T:Windows.UI.Xaml.UIElement"/> that defines the target coordinates.</param>
            <returns>A transform object that can be used to transform coordinates from the <see cref="T:Windows.UI.Xaml.UIElement"/> to the specified object.</returns>
        </member>
    </members>
</doc>
